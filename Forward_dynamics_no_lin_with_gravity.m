function qdd = Forward_dynamics_no_lin_with_gravity(g,k,l,l0,m,theta1,theta2)
%Forward_dynamics_no_lin_with_gravity
%    QDD = Forward_dynamics_no_lin_with_gravity(G,K,L,L0,M,THETA1,THETA2)

%    This function was generated by the Symbolic Math Toolbox version 25.1.
%    01-Aug-2025 13:11:10

et1 = k.*l0.^2.*cos(theta2)-k.*l0.*cos(theta2).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0)+g.*m.*sin(theta2).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0);
et2 = -k.*l.*cos(theta1).*sin(theta2).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0)+k.*l.*cos(theta2).*sin(theta1).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0)+k.*l.*l0.*cos(theta1).*sin(theta2)-k.*l.*l0.*cos(theta2).*sin(theta1);
et3 = -k.*l0.^2.*cos(theta1)+k.*l0.*cos(theta1).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0)+g.*m.*sin(theta1).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0);
et4 = k.*l.*cos(theta1).*sin(theta2).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0)-k.*l.*cos(theta2).*sin(theta1).*sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0)-k.*l.*l0.*cos(theta1).*sin(theta2)+k.*l.*l0.*cos(theta2).*sin(theta1);
qdd = [((et3+et4).*1.0./sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0))./(l.*m);((et1+et2).*1.0./sqrt(l.^2.*cos(theta1).^2+l.^2.*cos(theta2).^2+l.^2.*sin(theta1).^2+l.^2.*sin(theta2).^2+l0.^2-l.*l0.*sin(theta1).*2.0+l.*l0.*sin(theta2).*2.0-l.^2.*cos(theta1).*cos(theta2).*2.0-l.^2.*sin(theta1).*sin(theta2).*2.0))./(l.*m)];
end
